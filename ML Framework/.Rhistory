install.packages(c("earth", "klaR", "rpart"))
library(readr)
library(ggplot2)
library(broom)
library(tidymodels)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
head(urchins)
str(urchins)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("glm")
lm_mod <- linear_reg()
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
mars_disc_spec <-
discrim_flexible(prod_degree = tune()) %>%
set_engine("earth")
reg_disc_spec <-
discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %>%
set_engine("klaR")
dtree <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
set.seed(42)
train_resamples <- bootstraps(urchins)
all_workflows <-
workflow_set(
preproc = list("formula" = class ~ .),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 20, verbose = TRUE)
names(urchins)
all_workflows <-
workflow_set(
preproc = list("formula" =  width ~ initial_volume * food_regime),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 20, verbose = TRUE)
install.packages("discrim")
library(readr)
library(ggplot2)
library(broom)
library(tidymodels)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
head(urchins)
str(urchins)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("glm")
lm_mod <- linear_reg()
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
mars_disc_spec <-
discrim_flexible(prod_degree = tune()) %>%
set_engine("earth")
reg_disc_spec <-
discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %>%
set_engine("klaR")
dtree <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
set.seed(42)
train_resamples <- bootstraps(urchins)
all_workflows <-
workflow_set(
preproc = list("formula" =  width ~ initial_volume * food_regime),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 20, verbose = TRUE)
library(readr)
library(ggplot2)
library(broom)
library(tidymodels)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
head(urchins)
str(urchins)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("glm")
lm_mod <- linear_reg()
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
mars_disc_spec <-
discrim_flexible(prod_degree = tune()) %>%
set_engine("earth")
reg_disc_spec <-
discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %>%
set_engine("klaR")
dtree <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
set.seed(42)
train_resamples <- bootstraps(urchins)
all_workflows <-
workflow_set(
preproc = list("formula" =  width ~ initial_volume + food_regime),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 20, verbose = TRUE)
rm(list = ls())
library(readr)
library(ggplot2)
library(broom)
library(tidymodels)
library(discrim)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
head(urchins)
str(urchins)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("glm")
lm_mod <- linear_reg()
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
mars_disc_spec <-
discrim_flexible(prod_degree = tune()) %>%
set_engine("earth")
reg_disc_spec <-
discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %>%
set_engine("klaR")
dtree <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
set.seed(42)
train_resamples <- bootstraps(urchins)
table(urchins$width)
data("parabolic")
set.seed(42)
train_resamples <- bootstraps(parabolic)
all_workflows <-
workflow_set(
preproc = list("formula" = class ~ .),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 20, verbose = TRUE)
library(readr)
library(ggplot2)
library(broom)
library(tidymodels)
library(discrim)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
head(urchins)
str(urchins)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("glm")
lm_mod <- linear_reg()
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
mars_disc_spec <-
discrim_flexible(prod_degree = tune()) %>%
set_engine("earth")
reg_disc_spec <-
discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %>%
set_engine("klaR")
dtree <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
data("parabolic")
set.seed(42)
train_resamples <- bootstraps(parabolic)
all_workflows <-
workflow_set(
preproc = list("formula" = class ~ .),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 20, verbose = TRUE)
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 10, verbose = TRUE)
styler:::set_style_transformers()
install.packages("mda")
library(readr)
library(ggplot2)
library(broom)
library(tidymodels)
library(discrim)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
head(urchins)
str(urchins)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("glm")
lm_mod <- linear_reg()
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
mars_disc_spec <-
discrim_flexible(prod_degree = tune()) %>%
set_engine("earth")
reg_disc_spec <-
discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %>%
set_engine("klaR")
dtree <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
data("parabolic")
set.seed(42)
train_resamples <- bootstraps(parabolic)
all_workflows <-
workflow_set(
preproc = list("formula" = class ~ .),
models = list(regularized = reg_disc_spec, mars = mars_disc_spec, dtree = dtree)
)
all_workflows
all_workflows <-
all_workflows %>%
option_add(id = "formula_cart",
control = control_grid(extract = function(x) x))
all_workflows
all_workflows <-
all_workflows %>%
workflow_map(resamples = train_resamples, grid = 10, verbose = TRUE)
all_workflows
rank_results(all_workflows, rank_metric = "roc_auc")
autoplot(all_workflows, metric = "roc_auc")
install.packages("pwr")
library(pwr)
D1 = (20000 - 14500) / 6000
pwr.t.test(d = D1, sig.level = 0.05, power = 0.80, type = "one.sample")
D1 = (20000 - 14500) / 6000
pwr.t.test(d = D1, sig.level = 0.05, power = 0.80
, type = "one.sample", alternative = "less")
D1 = (20000 - 14500) / 6000
pwr.t.test(d = -D1, sig.level = 0.05, power = 0.80
, type = "one.sample", alternative = "less")
D1 = (14500 - 20000) / 6000
pwr.t.test(d = D1, sig.level = 0.05, power = 0.80
, type = "one.sample", alternative = "less")
dfSleep = data.frame(Change = c(-0.55, 0.16, 2.6, 0.65, -0.23, 0.21, -4.3, 2, -1.7, 1.9))
dfSleep = data.frame(Change = c(-0.55, 0.16, 2.6, 0.65, -0.23, 0.21, -4.3, 2, -1.7, 1.9))
D2 = (mean(dfSleep$Change) - 0) / sd(dfSleep$Change)
pwr.t.test(d = D2, sig.level = 0.05, power = 0.80
, type = "one.sample", alternative = "two.sided")
mean(dfSleep$Change)
sd(dfSleep$Change)
