A-->B")
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A-->C
B-->C
")
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A--C
B-->C
")
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A->C
B-->C
")
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A->-C
B-->C
")
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A-->C
B-->C
")
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A-->C
B-->C
A-->B
")
mermaid("
graph LR
A((Salinity))
A-->B(Barnacles)
B-.->|-0.10|B1{Mussels}
A-- 0.30 -->B1
C[Air Temp]
C-->B
C-.->E(Macroalgae)
E-->B1
C== 0.89 ==>B1
")
mermaid("
graph LR
A((Salinity))
A-->B(Barnacles)
B-.->|-0.10|B1{Mussels}
A-- 0.30 -->B1
C[Air Temp]
C-->B
C-.->E(Macroalgae)
E-->B1
C== 0.89 ==>B1
")
# Testing
mermaid("
graph LR
A[Age]
B((Religiosity))
C(Happiness)
A-->C
B-->C
")
mermaid("
graph LR
A[Gender]
B[Age]
C[Height]
D[Income]
E(Demographics)
F((Happiness))
D==>F
")
# Testing
mermaid("
graph LR
A[Gender]
B[Age]
C[Height]
D[Income]
E(Demographics)
F((Happiness))
A-->E
B-->E
C-->E
E==>F
D==>F
")
mermaid("
graph LR
A[Gender]
B[Age]
C[Height]
D[Income]
E(Demographics)
F((Happiness))
A-->E
B-->E
C-->E
D-->E
E==>F
D==>F
")
mermaid("
graph LR
A((EM Trouble)) -- 0.1 --> F[Adult Incarceration]
B((Trauma)) -- 0.2 --> F[Adult Incarceration]
C((HS Trouble)) -- 0.3 --> F[Adult Incarceration]
D((Delinquency)) -- 0.4 --> F[Adult Incarceration]
E((Crime)) -- 0.5 --> F[Adult Incarceration]
A -- 0.60 --> C
B -- 0.70 --> C
D -- 0.80 --> C
")
# Testing
mermaid("
graph LR
A[Gender]
B[Age]
C[Height]
D[Income]
E(Demographics)
F((Happiness))
A-->E
B-->E
C-->E
D-->E
E==>F
D==>F
")
# Testing 2
grViz("
digraph boxes_and_circles{
# A graph statement
graph [overlap = true, fontsize = 10]")
grViz("
digraph boxes_and_circles{
# A graph statement
graph [overlap = true, fontsize = 10]")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
# Testing 2
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3==>8
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3=>8
}
")
grViz("
digraph dot {
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson, label='Polynomial Regression Model'
/*, rankdir='LR', style=filled, fillcolor = blue*/
]
subgraph cluster1 {
node [shape = diamond,
color = black]
xi
node [shape = circle,
style = filled,
fillcolor = grey]
ti
edge [color = black]
xi -> ti
label='N'
}
node [shape = circle]
w
node [shape = diamond,
color = black,
label = '&alpha;']
alpha
node [shape = diamond,
color = black,
label = '&sigma;&#x00B2;']
sigma
edge [color = black]
alpha -> w
w -> ti
sigma -> ti
}
",
engine = "dot")
# Testing 2
grViz("
digraph dot {
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson, label='Polynomial Regression Model'
/*, rankdir='LR', style=filled, fillcolor = blue*/
]
subgraph cluster1 {
node [shape = diamond,
color = black]
xi
node [shape = circle,
style = filled,
fillcolor = grey]
ti
edge [color = black]
xi -> ti
label='N'
}
node [shape = circle,
color = 'red']
w
node [shape = diamond,
color = black,
label = '&alpha;']
alpha
node [shape = diamond,
color = black,
label = '&sigma;&#x00B2;']
sigma
edge [color = black]
alpha -> w
w -> ti
sigma -> ti
}
",
engine = "dot")
mermaid("
graph LR
A[Gender]
B[Age]
C[Height]
D[Income]
E(Demographics)
F((Happiness))
A-->E
B-->E
C-->E
D-->E
E==>F
D==>F
")
# Testing
mermaid("
digraph LR
A[Gender]
B[Age]
C[Height]
D[Income]
E(Demographics)
F((Happiness))
A-->E
B-->E
C-->E
D-->E
E==>F
D==>F
")
install.packages(c("carData", "ggraph", "sem", "sp", "tidyr"))
install.packages(c("ggraph", "haven", "labelled", "rversions", "sem", "sp", "tidyr"))
install.packages(c("dplyr", "ggplot2", "httpuv", "pkgload", "StanHeaders"))
install.packages(c("dplyr", "haven", "pkgload"))
install.packages(c("dplyr", "haven", "pkgload", "rsample"))
setwd("C:/Users/miqui/OneDrive/R Projects/ADAMS Board")
library(readxl)
library(readr)
library(xlsx)
library(dplyr)
library(lubridate)
library(leaflet)
library(ggmap)
library(stringr)
members <- read_excel("ADAMHSCCNeedsAssessmentData20200522.xlsx",
sheet = "Members")
View(members)
PayerSpans <- read_excel("ADAMHSCCNeedsAssessmentData20200522.xlsx",
sheet = "PayerSpans", col_types = c("numeric",
"date", "date", "text", "text", "text",
"numeric", "text"))
View(PayerSpans)
Services <- read_excel("ADAMHSCCNeedsAssessmentData20200522.xlsx",
sheet = "Services", col_types = c("numeric",
"text", "numeric", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "numeric", "text", "date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text", "text", "text"))
View(Services)
Services$ServiceDate <- as.Date(Services$ServiceDate)
# Extract the year from the service date
Services$Year <- year(Services$ServiceDate)
# Select only the data with Year == 2019
Services <- Services %>% filter(Year == 2019)
ServicesSummary <- Services %>%
select(IndividualId, Payment, PayerOfService, ProviderType) %>%
group_by(IndividualId) %>%
summarise(AmtPaidM = sum(Payment[PayerOfService=="MEDICAID"]),
NumServM = sum(PayerOfService=="MEDICAID"),
AmtPaidB = sum(Payment[PayerOfService=="BOARD"]),
NumServB = sum(PayerOfService=="BOARD"),
NumSUD = sum(ProviderType=="SUD"),
NumMH = sum(ProviderType=="MH")) %>%
mutate(Category =
case_when(NumServM > 0 & NumServB > 0 ~ "Both",
NumServM == 0 & NumServB >=1 ~ "Board Only",
NumServM >= 1 & NumServB ==0 ~ "Medicaid Only",
AmtPaidM == 0 & AmtPaidB ==0 ~ "Neither")) %>%
mutate(ProviderCategory =
case_when(NumSUD > 0 & NumMH > 0 ~ "Both",
NumSUD > 0 & NumMH == 0 ~ "SUD Only",
NumSUD == 0 & NumMH > 0 ~ "MH Only",
NumSUD == 0 & NumMH == 0 ~ "Neither"))
table(ServicesSummary$ProviderCategory)
rm(members)
rm(PayerSpans)
table(Services$ProviderType)
table(is.na(Services$ProviderType)
asdfwef
rqwer
table(is.na(Services$ProviderType))
View(Services)
members <- read_excel("ADAMHSCCNeedsAssessmentData20200522.xlsx",
sheet = "Members")
table(is.na(Services$ProviderType))
names(members)
names(Services)
test <- merge(members, Services, by = "IndividualId")
View(test)
table(test$ProviderType)
table(Services$ProviderType)
cbind(members, Services)
inner_join()
inner_join(members, Services, by = "IndividualId")
test <- inner_join(members, Services, by = "IndividualId")
View(test)
View(test)
table(test$ProviderType)
table(is.na(test$ProviderType))
rm(list = ls())
Services <- read_excel("ADAMHSCCNeedsAssessmentData20200522.xlsx",
sheet = "Services", col_types = c("numeric",
"text", "numeric", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "numeric", "text", "date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text", "text", "text"))
# Turn into a date-time variable for easier year extraction
Services$ServiceDate <- as.Date(Services$ServiceDate)
# Extract the year from the service date
Services$Year <- year(Services$ServiceDate)
# Select only the data with Year == 2019
Services <- Services %>% filter(Year == 2019)
ServicesSummary <- Services %>%
select(IndividualId, Payment, PayerOfService, ProviderType) %>%
group_by(IndividualId) %>%
summarise(AmtPaidM = sum(Payment[PayerOfService=="MEDICAID"]),
NumServM = sum(PayerOfService=="MEDICAID"),
AmtPaidB = sum(Payment[PayerOfService=="BOARD"]),
NumServB = sum(PayerOfService=="BOARD"),
NumSUD = sum(ProviderType=="SUD"),
NumMH = sum(ProviderType=="MH")) %>%
mutate(Category =
case_when(NumServM > 0 & NumServB > 0 ~ "Both",
NumServM == 0 & NumServB >=1 ~ "Board Only",
NumServM >= 1 & NumServB ==0 ~ "Medicaid Only",
AmtPaidM == 0 & AmtPaidB ==0 ~ "Neither")) %>%
mutate(ProviderCategory =
case_when(NumSUD > 0 & NumMH > 0 ~ "Both",
NumSUD > 0 & NumMH == 0 ~ "SUD Only",
NumSUD == 0 & NumMH > 0 ~ "MH Only",
NumSUD == 0 & NumMH == 0 ~ "Neither"))
table(ServicesSummary$ProviderCategory)
View(ServicesSummary)
test <- merge(ServicesSummary, Services, by = "IndividualId")
table(test$ProviderCategory)
table(is.na(test$ProviderType))
table(ServicesSummary$ProviderCategory)
table(test$ProviderCategory)
table(is.na(test$ProviderCategory))
View(test)
asdf <- Services %>% filter(IndividualId==3099)
table(asdf$ProviderType)
View(asdf)
table(asdf$ProviderType)
table(is.na(asdf$ProviderType))
ServicesSummary <- Services %>%
select(IndividualId, Payment, PayerOfService, ProviderType) %>%
group_by(IndividualId) %>%
summarise(AmtPaidM = sum(Payment[PayerOfService=="MEDICAID"]),
NumServM = sum(PayerOfService=="MEDICAID"),
AmtPaidB = sum(Payment[PayerOfService=="BOARD"]),
NumServB = sum(PayerOfService=="BOARD"),
NumSUD = sum(ProviderType=="SUD"),
NumMH = sum(ProviderType=="MH")) %>%
mutate(Category =
case_when(NumServM > 0 & NumServB > 0 ~ "Both",
NumServM == 0 & NumServB >= 1 ~ "Board Only",
NumServM >= 1 & NumServB == 0 ~ "Medicaid Only",
AmtPaidM == 0 & AmtPaidB == 0 ~ "Neither")) %>%
mutate(ProviderCategory =
case_when(NumSUD > 0 & NumMH > 0 ~ "Both",
NumSUD > 0 & NumMH == 0 ~ "SUD Only",
NumSUD == 0 & NumMH > 0 ~ "MH Only",
is.na(NumSUD) & is.na(NumMH) ~ "Neither"))
table(ServicesSummary$ProviderCategory)
test <- merge(ServicesSummary, Services, by = "IndividualId")
table(test$ProviderCategory)
ServicesSummary <- Services %>%
select(IndividualId, Payment, PayerOfService, ProviderType) %>%
group_by(IndividualId) %>%
summarise(AmtPaidM = sum(Payment[PayerOfService=="MEDICAID"]),
NumServM = sum(PayerOfService=="MEDICAID"),
AmtPaidB = sum(Payment[PayerOfService=="BOARD"]),
NumServB = sum(PayerOfService=="BOARD"),
NumSUD = sum(ProviderType=="SUD"),
NumMH = sum(ProviderType=="MH")) %>%
mutate(Category =
case_when(NumServM > 0 & NumServB > 0 ~ "Both",
NumServM == 0 & NumServB >= 1 ~ "Board Only",
NumServM >= 1 & NumServB == 0 ~ "Medicaid Only",
AmtPaidM == 0 & AmtPaidB == 0 ~ "Neither"))
View(ServicesSummary)
table(ServicesSummary$ProviderCategory)
ServicesSummary <- Services %>%
select(IndividualId, Payment, PayerOfService, ProviderType) %>%
group_by(IndividualId) %>%
summarise(AmtPaidM = sum(Payment[PayerOfService=="MEDICAID"]),
NumServM = sum(PayerOfService=="MEDICAID"),
AmtPaidB = sum(Payment[PayerOfService=="BOARD"]),
NumServB = sum(PayerOfService=="BOARD"),
NumSUD = sum(ProviderType=="SUD"),
NumMH = sum(ProviderType=="MH")) %>%
mutate(Category =
case_when(NumServM > 0 & NumServB > 0 ~ "Both",
NumServM == 0 & NumServB >= 1 ~ "Board Only",
NumServM >= 1 & NumServB == 0 ~ "Medicaid Only",
AmtPaidM == 0 & AmtPaidB == 0 ~ "Neither")) %>%
mutate(ProviderCategory =
case_when(NumSUD > 0 & NumMH > 0 ~ "Both",
NumSUD > 0 & NumMH == 0 ~ "SUD Only",
NumSUD == 0 & NumMH > 0 ~ "MH Only",
is.na(NumSUD) & is.na(NumMH) ~ "Neither"))
table(ServicesSummary$ProviderCategory)
asdf <- Services %>% filter(IndividualId in c(163, 191, 778, 3099)
asdf <- Services %>% filter(IndividualId in c(163, 191, 778, 3099))
asdf <- Services %>% filter(IndividualId == c(163, 191, 778, 3099))
asdf <- Services %>% filter(IndividualId == c(163, 191, 778, 3099))
asdf <- Services %>% filter(IndividualId %in% c(163, 191, 778, 3099))
table(asdf$ProviderType)
table(asdf$ProviderType)
table(asdf$ProviderType)
