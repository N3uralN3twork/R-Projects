color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
base
install.packages("raster")
library(raster)
rm(list = ls())
library(readxl)
cities <- read_excel("Population by Prefecture.xlsx",
sheet = "Cities", col_types = c("text",
"text", "text", "text", "numeric",
"numeric", "numeric", "date"))
View(cities)
leaflet(cities)
leaflet(cities) %>% addPolygons()
View(cities)
data("quakes")
View(quakes)
rm(list = ls())
library(readxl)
library(tidyverse)
library(tidyr)
library(ggmap)
# Import the necessary data
cities <- read_excel("Population by Prefecture.xlsx",
sheet = "Cities", col_types = c("text",
"text", "text", "text", "numeric",
"numeric", "numeric", "date"))
View(cities)
# Source of api key:
register_google(key = "AIzaSyDF-reX5JzcsAF-yXjZlBpaeIxkgoubdH8")
data <- geocode(cities$GeographicName, output = "latlona", source = "google")
View(data)
View(cities)
result <- cbind(cities, data)
View(result)
cities <- cbind(cities, data)
View(cities)
names(cities)
cities %>%
select(-address)
library(readxl)
library(tidyverse)
library(tidyr)
library(ggmap)
cities %>%
select(-address)
cities <- cities %>%
select(-address, -Japanese)
View(cities)
library(leaflet)
remove.packages("tidygeocoder", lib="~/R/win-library/3.6")
R
R.about
summary()
# Build the map
names(cities)
base <- leaflet(data = cities) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(Density),
label = ~as.character(Density))
base
base <- leaflet(data = cities) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(Density),
label = ~as.character(Density)) %>%
addProviderTiles(provider = "Stamen.Watercolor")
base
# Build the map
names(cities)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>"))
# Build the map
names(cities)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density))
install.packages("htmltools")
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density) %>%
map(htmltols::HTML)) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
library(readxl)
library(tidyverse)
library(tidyr)
library(geocode)
library(leaflet)
library(readxl)
library(tidyverse)
library(tidyr)
library(leaflet)
names(cities)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density) %>%
map(htmltols::HTML)) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
library(readxl)
library(tidyverse)
library(tidyr)
library(leaflet)
# Build the map
names(cities)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density) %>%
map(htmltols::HTML)) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
install.packages("htmltools")
library(htmltools)
library(readxl)
library(tidyverse)
library(tidyr)
library(leaflet)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density) %>%
map(htmltols::HTML)) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
names(cities)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density) %>%
map(htmltools::HTML)) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
View(cities)
cities <- cbind(cities, data)
# Select only the useful variables
names(cities)
cities <- cities %>%
select(-address, -Japanese)
View(cities)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density) %>%
map(htmltools::HTML)) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = ~popup)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(popup = ~popup)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(popup = ~popup, color = "red")
leaflet.providers::get_providers()
leaflet.providers::providers_default()
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(popup = ~popup, color = "red") %>%
addProviderTiles(cartoDB)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(popup = ~popup, color = "red") %>%
addProviderTiles(cartoDB.dark)
names(providers)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(popup = ~popup, color = "red") %>%
addProviderTiles("CartoDB.DarkMater")
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addCircleMarkers(popup = ~popup, color = "red") %>%
addProviderTiles("CartoDB.DarkMater")
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addCircleMarkers(popup = ~popup, color = "red") %>%
addProviderTiles(CartoDB.DarkMatter)
names(providers)
cities %>%
mutate(popup = str_c("<strong>", City, "</strong>",
"<br/>",
"Density: ", Density)) %>%
leaflet() %>%
addCircleMarkers(popup = ~popup, color = "red") %>%
addProviderTiles("CartoDB.DarkMatter")
View(cities)
install.packages(c("broom", "cli", "digest", "epiR", "sp"))
rm(list = ls())
wafers <- data.frame(Treatment = (rep("A", 10), (rep("B", 10))))
wafers <- data.frame(Treatment = c((rep("A", 10), (rep("B", 10)))))
rep("A", 10)
wafers <- data.frame(Treatment = c(rep("A", 10)))
View(wafers)
wafers <- data.frame(Treatment = c(rep("A", 10), rep("B", 10)))
View(wafers)
wafers <- data.frame(Treatment = c(rep("A", 10), rep("B", 10)),
Defects = c(8,7,6,6,3,4,7,2,3,4,9,9,8,14,8,13,11,5,7,6))
View(wafers)
wafers.log <- glm(Defects ~ Treatment,
data = wafers,
family = poisson(link = "log"))
wafers.log
summary(wafers.log)
range(0,1)
# Testing Beta = 0
drop1(wafers.log)
# Testing Beta = 0
drop1(wafers.log, "chisq")
# Testing Beta = 0
drop1(wafers.log, "LRT")
# Testing Beta = 0
drop1(wafers.log, test = "LRT")
summary(wafers.log)
# Testing Beta = 0
drop1(wafers.log, test = "LRT")
confint(wafers.log, level = 0.95)
coefficients(wafers.log)
setwd("C:/Users/MatthiasQ.MATTQ/Documents/Categorical Data Analysis")
getwd()
library(readr)
library(stats)
library(rms)
library(dplyr)
setwd("C:\Users\MatthiasQ.MATTQ\OneDrive\Categorical Data Analysis")
setwd("C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis")
getwd()
library(readr)
library(stats)
library(rms)
library(dplyr)
setwd("C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis")
getwd()
library(readr)
library(stats)
library(rms)
library(dplyr)
setwd("C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis")
getwd()
library(readr)
library(stats)
library(rms)
library(dplyr)
ORing <- read_csv("Datasets/O ring challenge.csv", col_names = TRUE)
x <- ORing$Temp
y <- ORing$TD
fr <- function(beta, x, y){
alpha = beta[1]
beta  = beta[2]
return(-sum(-log(1+exp(alpha+beta*x))+y*(alpha+beta*x)))}
#Gradient of fr
grr <- function(beta, x, y){
beta0 = beta[1]
beta1 = beta[2]
c(sum(-exp( alpha + beta *x)/(1+ exp( alpha + beta *x))+y),sum(-x*exp( alpha + beta *x)/(1+ exp( alha + beta *x))+x*y))}
optim(c(20, -0.5), fn = fr, gr = grr, x = x, y = y)$"par"
oring.glm <- glm(TD ~ Temp,
data = ORing,
family = 'binomial')
summary(oring.glm)
horseshoecrabs <- read_csv("Datasets/Horseshoe Crabs.csv", col_names =FALSE)
colnames(horseshoecrabs) <- c("color", "spine", "width", "satell", "weight")
horseshoecrabs <- horseshoecrabs %>%
mutate(satell = replace(satell, satell > 0, 1))
head(horseshoecrabs, 5)
crabs.fit1 <- glm(satell ~ weight,
family = 'binomial',
data = horseshoecrabs)
summary(crabs.fit1)
drop1(crabs.fit1, test = "Chisq") #LR test statistic = 25.215
model <- lrm(satell ~ weight,
data = horseshoecrabs)
model
preds <- function(weight){
return(1/(1+exp(3.115520-1.568735*weight)))}
preds(weight = 0.2)
preds(weight = 5.2)
preds(weight = 2.427)
crabs.fit1$coefficients
exp(1.568735)
exp(0.877)
exp(confint(crabs.fit1)[2, ])
install.packages(c("digest", "forcats", "plyr", "rlang", "sp"))
install.packages(c("fs", "lifecycle", "plyr"))
#setwd("C:/Users/MatthiasQ.MATTQ/Documents/Categorical Data Analysis")
getwd()
library(readr)
library(stats)
library(rms)
library(dplyr)
birthwt <- read_csv("Datasets/LowBirthWeight.csv", col_names = TRUE)
head(birthwt)
race2 <- factor(birthwt$Race, labels = c("white", "black", "other"))
fit <- glm(Low ~ Age + Lwt + race2 + Smoke + PTL + Hypetension + UI + FTV,
data = birthwt,
family = binomial(link = "logit"))
summary(fit)
pchisq(q = (234.67 - 201.28), df = (188 - 179), lower.tail = FALSE)
summary(fit)
reduced <- glm(Low ~ Lwt + race2 + Smoke + Hypetension,
data = birthwt,
family = binomial())
summary(reduced)
full <- glm(Low ~ Age + Lwt + race2 + Smoke + Hypetension + PTL + UI + FTV,
data = birthwt,
family = binomial())
summary(full)
lrm(Low ~ Age + Lwt + race2 + Smoke + Hypetension + PTL + UI + FTV,
data = birthwt)
predict(reduced, newdata = data.frame(Lwt = mean(birthwt$Lwt), race2 ="black", Smoke = 0, Hypetension = 1), type ="response")
predict(reduced, newdata = data.frame(Lwt = mean(birthwt$Lwt), race2 = "white", Smoke = 0, Hypetension = 1), type = "response")
predict(reduced, newdata = data.frame(Lwt = mean(birthwt$Lwt), race2 = "other", Smoke = 1, Hypetension = 1), type = "response")
install.packages(c("DescTools", "dplyr", "fs", "plyr", "vctrs", "xml2"))
data(birthwt)
library(MASS)
data(birthwt)
head(birthwt)
race2 <- factor(birthwt$race, labels = c("white", "black", "other"))
names(birthwt)
full <- glm(low ~ age + lwt + race2 + smoke + ptl + ht + ui + ftv,
data = birthwt,
family = binomial(link = "logit"))
summary(full)
pchisq((234.67-201.28), df = 9, lower.tail = FALSE)
pchisq((234.67 - 201.28), df = (188-179), lower.tail = FALSE)
library(readr)
write_csv(birthwt, col_names = TRUE, path = "C:\Users\MatthiasQ.MATTQ\OneDrive\Categorical Data Analysis\Datasets")
write_csv(birthwt, col_names = TRUE, path = "C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis/Datasets")
write_csv(birthwt, col_names = TRUE, path = "C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis/Datasets")
write_csv(birthwt, col_names = TRUE, path = "C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis/Datasets/birthweight.csv")
table(birthwt$low)
fit0 <- glm(low ~ lwt + race2 + smoke + ht,
data = birthwt,
family = binomial(link = "logit"))
summary(fit0)
fit1 <- glm(low ~ age + lwt + race2 + smoke + ht + ptl + ui + ftv,
data = birthwt,
family = binomial(link = "logit"))
summary(fit1)
names(birthwt)
attach(birthwt)
predict(fit0, newdata = data.frame(lwt = mean(lwt), race2 = "black", smoke = 0, ht = 1), type = "response")
predict(fit0, newdata = data.frame(lwt = mean(lwt), race2 = "white", smoke = 0, ht = 1), type = "response")
predict(fit0, newdata = data.frame(lwt = mean(lwt), race2 = "other", smoke = 1, ht = 1), type = "response")
install.packages(c("DescTools", "dplyr", "fs", "plyr", "vctrs", "xml2"))
install.packages(c("DescTools", "glue", "V8"))
install.packages(c("DescTools", "glue", "units", "V8"))
install.packages("mice")
library(mice)
sessionInfo()
sessionInfo()
library(mice)
sessionInfo()
sessionInfo()
library(mice)
install.packages(c("glue", "ModelMetrics", "pROC", "Rcpp", "recipes", "units"))
install.packages(c("caret", "epitools", "Hmisc", "ModelMetrics", "pROC", "Rcpp", "units"))
library(MASS)
data(birthwt)
head(birthwt)
race2 <- factor(birthwt$race, labels = c("white", "black", "other"))
mean(birthwt$lwt)
detach(birthwt)
install.packages(c("callr", "caret", "Hmisc", "ModelMetrics", "pROC", "Rcpp", "sf", "units"))
library(readr)
library(readr)
drugs <- read_csv("C:/Users/MatthiasQ.MATTQ/OneDrive/Categorical Data Analysis/Datasets/Drugfree.csv")
View(drugs)
summary(drugs)
summary(drugs, drugs$DFREE)
summary(drugs, drugs$DFREE)
names(drugs)
glm <- glm(DFREE~AGE,
data = drugs,
family = binomial(link = "logit"))
summary(glm)
install.packages(c("backports", "classInt", "foreach", "fs", "geojsonio", "glue", "h2o", "httpcode", "isoband", "lubridate", "lwgeom", "multcomp", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "sf", "tibble", "tinytex", "tmaptools", "xfun", "xml2"))
install.packages(c("broom", "dbplyr", "isoband", "lwgeom", "MASS", "modelr", "pkgbuild", "purrr", "raster", "RCurl", "recipes", "reshape2", "sf", "tibble", "withr", "xml2"))
install.packages(c("DescTools", "MASS", "pillar", "pkgbuild", "polspline", "ps", "recipes", "rgeos", "rlang", "sf", "tidyr", "zoo"))
install.packages("ISLR")
library(ISLR)
setwd("C:/Users/MatthiasQ.MATTQ/OneDrive/R Projects/SEM in R")
require(lavaan)
require("semPlot")
library(foreign)
library(tidyverse)
library(tidygraph)
library(ggraph)
db = file.choose()
dataset = read.spss(db, to.data.frame=TRUE)
MSModel <- '
#######Latent
TRAUMACRIME =~ jail
+ victim + gunshotless12 + gunshot12to18
TRAUMAPOVERTY =~  unemployment + homeless
+ poverty1997 + poverty1998 + poverty 1999 + poverty2000 + poverty2001 + poverty2002
TRAUMAFAMILY =~ death + hospitalization + divorce
DELINQUENCY =~ juveniledestroyproperty + juvenilestealless
+ juvenilestealmore + juvenileotherproperty + juvenileattack + juvenileselldrugs
CRIME =~ adultgun + adultdestroyproperty + adultstealless + adultstealmore + adultotherproperty
+ adultattack + adultselldrugs
ELEMSCHOOL  =~ TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY + DELINQUENCY
+ elementmiddledropout
+ elementarysuspend + middlesuspend
+ SES + citizenship
HIGHSCHOOL  =~
+ highdropout
+ highsuspend
+ SES
+ citizenship
#######Correlations
#TRAUMACRIME ~~ TRAUMAPOVERTY
#######Regressions
adultincarceration ~  TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY + ELEMSCHOOL + HIGHSCHOOL + juvenileincarceration
+  age +  twoparenthome + black + hispanic  + geography97 + SES + citizenship + gender
HIGHSCHOOL ~  TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY + ELEMSCHOOL  + juvenileincarceration
+  age +  twoparenthome + black + hispanic  + geography97 + SES + citizenship + gender
ELEMSCHOOL ~  TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY  + juvenileincarceration
+  age +  twoparenthome + black + hispanic  + geography97 + SES + citizenship + gender
'
##### End Middleschool Model #####
# Converges when you don't ask to compute by group and include gender in the regressions
# Does not compute the standard errors when asked to compute by group
fit3_gender <- cfa(MSModel, data=dataset, std.lv=TRUE)
summary(fit3_gender, standardized=TRUE, fit.measures=TRUE)
MSModel <- '
#######Latent
TRAUMACRIME =~ jail
+ victim + gunshotless12 + gunshot12to18
TRAUMAPOVERTY =~  unemployment + homeless
+ poverty1997 + poverty1998 + poverty 1999 + poverty2000 + poverty2001 + poverty2002
TRAUMAFAMILY =~ death + hospitalization + divorce
DELINQUENCY =~ juveniledestroyproperty + juvenilestealless
+ juvenilestealmore + juvenileotherproperty + juvenileattack + juvenileselldrugs
CRIME =~ adultgun + adultdestroyproperty + adultstealless + adultstealmore + adultotherproperty
+ adultattack + adultselldrugs
ELEMSCHOOL  =~ TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY + DELINQUENCY
+ elementmiddledropout
+ elementarysuspend + middlesuspend
+ SES + citizenship
HIGHSCHOOL  =~
+ highdropout
+ highsuspend
+ SES
+ citizenship
#######Correlations
#TRAUMACRIME ~~ TRAUMAPOVERTY
#######Regressions
adultincarceration ~  TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY + ELEMSCHOOL + HIGHSCHOOL + CRIME + juvenileincarceration
+  age +  twoparenthome + black + hispanic  + geography97 + SES + citizenship + gender
HIGHSCHOOL ~  TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY + ELEMSCHOOL  + juvenileincarceration
+  age +  twoparenthome + black + hispanic  + geography97 + SES + citizenship + gender
ELEMSCHOOL ~  TRAUMACRIME + TRAUMAPOVERTY + TRAUMAFAMILY  + juvenileincarceration
+  age +  twoparenthome + black + hispanic  + geography97 + SES + citizenship + gender
'
##### End Middleschool Model #####
# Converges when you don't ask to compute by group and include gender in the regressions
# Does not compute the standard errors when asked to compute by group
fit <- cfa(MSModel, data=dataset, std.lv=TRUE)
summary(fit3, standardized=TRUE, fit.measures=TRUE)
##### End Middleschool Model #####
# Converges when you don't ask to compute by group and include gender in the regressions
# Does not compute the standard errors when asked to compute by group
fit3 <- cfa(MSModel, data=dataset, std.lv=TRUE)
summary(fit3, standardized=TRUE, fit.measures=TRUE)
