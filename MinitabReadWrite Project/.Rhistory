# Generate a value according to the histogram
generated_value = sample(aggr$dim,prob=aggr$count,1)
# Slice the actual multivariate histogram in order to
# take only records with the selected value on the
# selected dimension
if (!is.na(generated_value)) {
tmp = tmp[tmp[[colname]] == generated_value & !is.na(tmp[[colname]]),]
}
else {
tmp = tmp[is.na(tmp[[colname]]),]
}
}
}
# Once the procedure finishes, we get a bulk of records
# with the same values of each dimension. Let's take
# one of these records uniformly
random_index = sample(1:nrow(tmp),1)
new_record = tmp[random_index,]
# Let's remove duplicates
inserted_record = sqldf("select * from new_record except select * from generated")
# Insert in the "generated" data frame and repeat until desired sample size is reached
generated = rbind(generated,inserted_record)
}
install.packages("sqldf")
library(sqldf)
generated = head(d,0)
while (nrow(generated) < n_sample) {
# For debug purposes
cat(nrow(generated),"\n")
flush.console()
tmp = d
# Calculate the histogram for each dimension
# and select one value at a time, slicing the
# original dataset according to its histogram
for (i in 1:length(dimensions)) {
colname = dimensions[i]
if (class(d[[colname]]) %in% c("numeric") &&
sum(d[[colname]] == as.integer(d[[colname]]),na.rm = TRUE) == 0
) {
# Numerical variable. Histogram with Rice's Rule
# If there are NA's, stratify on those
na_count = sum(is.na(tmp[[colname]]))
not_na_count = length(tmp[[colname]]) - na_count
s = sample(c(0,1),prob = c(not_na_count,na_count),1)
if (s == 0) {
# Histogram stratification based on breaks calculated on the
# population
n_breaks = floor(2*sum(!is.na(d[[colname]]))**((1/3)))
bar_size = (max(d[[colname]],na.rm = TRUE)-min(d[[colname]],na.rm = TRUE))/n_breaks
breaks = sapply(0:n_breaks,function(i) {min(d[[colname]],na.rm = TRUE) + i*bar_size})
h = hist(tmp[[colname]],breaks=breaks,plot = F)
# Select one bar of the histogram according to the density
bar_id  = sample(1:length(h$mids),prob = h$counts,1)
bar_start = h$breaks[bar_id]
bar_end = h$breaks[bar_id + 1]
tmp = tmp[tmp[[colname]] >= bar_start & tmp[[colname]] < bar_end & !is.na(tmp[[colname]]),]
} else {
# NA
tmp = tmp[is.na(tmp[[colname]]),]
}
} else {
# Categorical variable
# Histogram for the selected dimension
aggr = as.data.frame(table(tmp[,colname],useNA="ifany"))
names(aggr) = c("dim","count")
# Generate a value according to the histogram
generated_value = sample(aggr$dim,prob=aggr$count,1)
# Slice the actual multivariate histogram in order to
# take only records with the selected value on the
# selected dimension
if (!is.na(generated_value)) {
tmp = tmp[tmp[[colname]] == generated_value & !is.na(tmp[[colname]]),]
}
else {
tmp = tmp[is.na(tmp[[colname]]),]
}
}
}
# Once the procedure finishes, we get a bulk of records
# with the same values of each dimension. Let's take
# one of these records uniformly
random_index = sample(1:nrow(tmp),1)
new_record = tmp[random_index,]
# Let's remove duplicates
inserted_record = sqldf("select * from new_record except select * from generated")
# Insert in the "generated" data frame and repeat until desired sample size is reached
generated = rbind(generated,inserted_record)
}
View(generated)
stratified <- function(df, group, size, select = NULL,
replace = FALSE, bothSets = FALSE) {
if (is.null(select)) {
df <- df
} else {
if (is.null(names(select))) stop("'select' must be a named list")
if (!all(names(select) %in% names(df)))
stop("Please verify your 'select' argument")
temp <- sapply(names(select),
function(x) df[[x]] %in% select[[x]])
df <- df[rowSums(temp) == length(select), ]
}
df.interaction <- interaction(df[group], drop = TRUE)
df.table <- table(df.interaction)
df.split <- split(df, df.interaction)
if (length(size) > 1) {
if (length(size) != length(df.split))
stop("Number of groups is ", length(df.split),
" but number of sizes supplied is ", length(size))
if (is.null(names(size))) {
n <- setNames(size, names(df.split))
message(sQuote("size"), " vector entered as:\n\nsize = structure(c(",
paste(n, collapse = ", "), "),\n.Names = c(",
paste(shQuote(names(n)), collapse = ", "), ")) \n\n")
} else {
ifelse(all(names(size) %in% names(df.split)),
n <- size[names(df.split)],
stop("Named vector supplied with names ",
paste(names(size), collapse = ", "),
"\n but the names for the group levels are ",
paste(names(df.split), collapse = ", ")))
}
} else if (size < 1) {
n <- round(df.table * size, digits = 0)
} else if (size >= 1) {
if (all(df.table >= size) || isTRUE(replace)) {
n <- setNames(rep(size, length.out = length(df.split)),
names(df.split))
} else {
message(
"Some groups\n---",
paste(names(df.table[df.table < size]), collapse = ", "),
"---\ncontain fewer observations",
" than desired number of samples.\n",
"All observations have been returned from those groups.")
n <- c(sapply(df.table[df.table >= size], function(x) x = size),
df.table[df.table < size])
}
}
temp <- lapply(
names(df.split),
function(x) df.split[[x]][sample(df.table[x],
n[x], replace = replace), ])
set1 <- do.call("rbind", temp)
if (isTRUE(bothSets)) {
set2 <- df[!rownames(df) %in% rownames(set1), ]
list(SET1 = set1, SET2 = set2)
} else {
set1
}
}
rm(l9st = ls())
rm(list = ls())
stratified <- function(df, group, size, select = NULL,
replace = FALSE, bothSets = FALSE) {
if (is.null(select)) {
df <- df
} else {
if (is.null(names(select))) stop("'select' must be a named list")
if (!all(names(select) %in% names(df)))
stop("Please verify your 'select' argument")
temp <- sapply(names(select),
function(x) df[[x]] %in% select[[x]])
df <- df[rowSums(temp) == length(select), ]
}
df.interaction <- interaction(df[group], drop = TRUE)
df.table <- table(df.interaction)
df.split <- split(df, df.interaction)
if (length(size) > 1) {
if (length(size) != length(df.split))
stop("Number of groups is ", length(df.split),
" but number of sizes supplied is ", length(size))
if (is.null(names(size))) {
n <- setNames(size, names(df.split))
message(sQuote("size"), " vector entered as:\n\nsize = structure(c(",
paste(n, collapse = ", "), "),\n.Names = c(",
paste(shQuote(names(n)), collapse = ", "), ")) \n\n")
} else {
ifelse(all(names(size) %in% names(df.split)),
n <- size[names(df.split)],
stop("Named vector supplied with names ",
paste(names(size), collapse = ", "),
"\n but the names for the group levels are ",
paste(names(df.split), collapse = ", ")))
}
} else if (size < 1) {
n <- round(df.table * size, digits = 0)
} else if (size >= 1) {
if (all(df.table >= size) || isTRUE(replace)) {
n <- setNames(rep(size, length.out = length(df.split)),
names(df.split))
} else {
message(
"Some groups\n---",
paste(names(df.table[df.table < size]), collapse = ", "),
"---\ncontain fewer observations",
" than desired number of samples.\n",
"All observations have been returned from those groups.")
n <- c(sapply(df.table[df.table >= size], function(x) x = size),
df.table[df.table < size])
}
}
temp <- lapply(
names(df.split),
function(x) df.split[[x]][sample(df.table[x],
n[x], replace = replace), ])
set1 <- do.call("rbind", temp)
if (isTRUE(bothSets)) {
set2 <- df[!rownames(df) %in% rownames(set1), ]
list(SET1 = set1, SET2 = set2)
} else {
set1
}
}
stratified <- function(df, group, size, select = NULL,
replace = FALSE, bothSets = FALSE) {
if (is.null(select)) {
df <- df
} else {
if (is.null(names(select))) stop("'select' must be a named list")
if (!all(names(select) %in% names(df)))
stop("Please verify your 'select' argument")
temp <- sapply(names(select),
function(x) df[[x]] %in% select[[x]])
df <- df[rowSums(temp) == length(select), ]
}
df.interaction <- interaction(df[group], drop = TRUE)
df.table <- table(df.interaction)
df.split <- split(df, df.interaction)
if (length(size) > 1) {
if (length(size) != length(df.split))
stop("Number of groups is ", length(df.split),
" but number of sizes supplied is ", length(size))
if (is.null(names(size))) {
n <- setNames(size, names(df.split))
message(sQuote("size"), " vector entered as:\n\nsize = structure(c(",
paste(n, collapse = ", "), "),\n.Names = c(",
paste(shQuote(names(n)), collapse = ", "), ")) \n\n")
} else {
ifelse(all(names(size) %in% names(df.split)),
n <- size[names(df.split)],
stop("Named vector supplied with names ",
paste(names(size), collapse = ", "),
"\n but the names for the group levels are ",
paste(names(df.split), collapse = ", ")))
}
} else if (size < 1) {
n <- round(df.table * size, digits = 0)
} else if (size >= 1) {
if (all(df.table >= size) || isTRUE(replace)) {
n <- setNames(rep(size, length.out = length(df.split)),
names(df.split))
} else {
message(
"Some groups\n---",
paste(names(df.table[df.table < size]), collapse = ", "),
"---\ncontain fewer observations",
" than desired number of samples.\n",
"All observations have been returned from those groups.")
n <- c(sapply(df.table[df.table >= size], function(x) x = size),
df.table[df.table < size])
}
}
temp <- lapply(
names(df.split),
function(x) df.split[[x]][sample(df.table[x],
n[x], replace = replace), ])
set1 <- do.call("rbind", temp)
if (isTRUE(bothSets)) {
set2 <- df[!rownames(df) %in% rownames(set1), ]
list(SET1 = set1, SET2 = set2)
} else {
set1
}
}
data("iris")
names(iris)
stratified(iris, group = "Species")
stratified(iris, group = "Species", size = 250, replace = FALSE)
stratified(iris, group = "Species", size = 50, replace = FALSE)
test <- stratified(iris, group = "Species", size = 10, replace = FALSE)
data("diamonds")
data("airquality")
names(airquality)
View(airquality)
data("sunspots")
names(sunspots)
data("Titanic")
names(Titanic)
Titanic
library(ggplot2)
data("diamonds")
test <- stratified(diamonds, group = "Species", size = 10, replace = FALSE)
names(diamonds)
rm(list = ls())
data("diamonds")
names(diamonds)
View(diamonds)
test <- stratified(diamonds, group = "Cut", size = 10, replace = FALSE)
stratified <- function(df, group, size, select = NULL,
replace = FALSE, bothSets = FALSE) {
if (is.null(select)) {
df <- df
} else {
if (is.null(names(select))) stop("'select' must be a named list")
if (!all(names(select) %in% names(df)))
stop("Please verify your 'select' argument")
temp <- sapply(names(select),
function(x) df[[x]] %in% select[[x]])
df <- df[rowSums(temp) == length(select), ]
}
df.interaction <- interaction(df[group], drop = TRUE)
df.table <- table(df.interaction)
df.split <- split(df, df.interaction)
if (length(size) > 1) {
if (length(size) != length(df.split))
stop("Number of groups is ", length(df.split),
" but number of sizes supplied is ", length(size))
if (is.null(names(size))) {
n <- setNames(size, names(df.split))
message(sQuote("size"), " vector entered as:\n\nsize = structure(c(",
paste(n, collapse = ", "), "),\n.Names = c(",
paste(shQuote(names(n)), collapse = ", "), ")) \n\n")
} else {
ifelse(all(names(size) %in% names(df.split)),
n <- size[names(df.split)],
stop("Named vector supplied with names ",
paste(names(size), collapse = ", "),
"\n but the names for the group levels are ",
paste(names(df.split), collapse = ", ")))
}
} else if (size < 1) {
n <- round(df.table * size, digits = 0)
} else if (size >= 1) {
if (all(df.table >= size) || isTRUE(replace)) {
n <- setNames(rep(size, length.out = length(df.split)),
names(df.split))
} else {
message(
"Some groups\n---",
paste(names(df.table[df.table < size]), collapse = ", "),
"---\ncontain fewer observations",
" than desired number of samples.\n",
"All observations have been returned from those groups.")
n <- c(sapply(df.table[df.table >= size], function(x) x = size),
df.table[df.table < size])
}
}
temp <- lapply(
names(df.split),
function(x) df.split[[x]][sample(df.table[x],
n[x], replace = replace), ])
set1 <- do.call("rbind", temp)
if (isTRUE(bothSets)) {
set2 <- df[!rownames(df) %in% rownames(set1), ]
list(SET1 = set1, SET2 = set2)
} else {
set1
}
}
names(diamonds)
test <- stratified(diamonds, group = "cut", size = 10, replace = FALSE)
prop.table(table(diamonds$cut))
test <- stratified(diamonds, group = "cut", size = 10, replace = FALSE)
table(test$cut)
library(dplyr)
test <- diamonds %>%
group_by(cut) %>%
sample_n(10)
test
test <- diamonds %>%
group_by(cut) %>%
sample_n(10, replace = FALSE)
test
prop.table(table(test$cut))
install.packages("sampling")
library(sampling)
?strata
mything <- rbind(matrix(rep("nc",530),530,1,byrow=TRUE),
matrix(rep("sc",270),270,1,byrow=TRUE))
mything <- cbind.data.frame(mything,c(rep(1,350),rep(2,150),
rep(3,50),rep(1,100),rep(2,150)),rnorm(800,100,10))
names(mything) <- c("state","region","income")
table(mything$region)
n_1 <- table(mything$region)[[1]]
n_2 <- table(mything$region)[[2]]
n_3 <- table(mything$region)[[3]]
s <- strata(mything,"region", size=c(50,30,20), method="srswor")
print(s)
print(s)
getdata(mything, s)
?sample
library(dplyr)
library(readr)
library(readxl)
install.packages(c("backports", "BH", "broom", "caTools", "cli", "coin", "colorspace", "config", "cpp11", "crosstalk", "data.table", "DBI", "dbplyr", "DescTools", "diffobj", "dplyr", "DT", "expm", "fansi", "fdrtool", "formattable", "future", "geojsonio", "ggplot2", "ggraph", "ggrepel", "gh", "git2r", "globals", "gplots", "graphlayouts", "hardhat", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "hunspell", "infer", "insight", "isoband", "jsonlite", "lava", "leaflet", "libcoin", "lme4", "lubridate", "magick", "magrittr", "multcomp", "parallelly", "partykit", "patchwork", "pillar", "pkgbuild", "prettydoc", "pROC", "processx", "ps", "psych", "questionr", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "renv", "rgdal", "rgl", "rlang", "rmarkdown", "rprojroot", "RSQLite", "rstudioapi", "sampling", "sf", "shinytest", "shinyWidgets", "sjmisc", "sp", "SQUAREM", "StanHeaders", "testthat", "tibble", "tidymodels", "tidytext", "tinytex", "tune", "usethis", "vctrs", "waldo", "webdriver", "withr", "xfun"))
library(dplyr)
discover = data.frame(Date = c("1/1/2020", "1/2/2020", "1/3/2020", "1/4/2020"),
Amount = c(0, 50, 100, 150))
citi = data.frame(Date = c("1/1/2020", "1/2/2020", "1/3/2020", "1/4/2020"),
Amount = c(100, 200, 300, 400))
View(citi)
inner_join(x = discover, y = citi, by=c("Date"))
final <- inner_join(x = discover, y = citi, by=c("Date"))
final <- final %>%
mutate(Debt = Amount.x + Amount.y)
final
library(dplyr)
discover = data.frame(Date = c("1/1/2020", "1/2/2020", "1/3/2020", "1/4/2020"),
Amount = c(0, 50, 100, 150))
citi = data.frame(Date = c("1/1/2020", "1/2/2020", "1/3/2020", "1/4/2020"),
Amount = c(100, 200, 300, 400))
final <- inner_join(x = discover, y = citi, by=c("Date"))
final <- final %>%
mutate(Debt = Amount.x + Amount.y)
final
library(ggplot2)
ggplot(data = final, aes(x = Date)) +
geom_point(y = Amount.y)
ggplot(data = final, aes(x = Date, y = Amount.y)) +
geom_point()
ggplot(data = final, aes(x = Date)) +
geom_point(aes(y = Amount.y)) +
geom_point(aes(y = Debt))
ggplot(data = final, aes(x = Date)) +
geom_point(aes(y = Debt)) +
geom_line(color="green")
ggplot(data = final, aes(x = Date)) +
geom_point(aes(y = Debt)) +
geom_line(aes(y=Debt), color="green")
ggplot(data = final, aes(x = Date, y = Debt)) +
geom_point() +
geom_line()
library(readxl)
portfolio <- read_excel("C:/Users/miqui/OneDrive/Finances/Quinn_Finances2.xlsx",
sheet = "Portfolio Value")
View(portfolio)
names(portfolio)
ggplot(data = portfolio, aes(x = Date, y = "Total Value")) +
geom_point()
View(portfolio)
ggplot(data = portfolio, aes(x = Date, y = "Capital Invested")) +
geom_point()
ggplot(data = portfolio, aes(x = Date, y = "Capital Invested")) +
geom_bar()
ggplot(data = portfolio, aes(x = Date, y = "Capital Invested")) +
geom_histogram()
ggplot(data = portfolio, aes(y = "Capital Invested")) +
geom_histogram()
ggplot(data = portfolio, aes(x = "Capital Invested")) +
geom_histogram()
str(portfolio)
View(portfolio)
ggplot(data = portfolio, aes(x = "Capital Invested")) +
geom_histogram()
portfolio$`Capital Invested` <- as.numeric(portfolio$`Capital Invested`)
portfolio$`Capital Invested` <- as.numeric(portfolio$`Capital Invested`)
ggplot(data = portfolio, aes(x = "Capital Invested")) +
geom_histogram()
ggplot(data = portfolio, aes(x = "Capital Invested", stat="count")) +
geom_histogram()
ggplot(data = portfolio, aes(x = "Capital Invested")) +
geom_histogram(stat="count")
ggplot(data = portfolio, aes(x = "Capital Invested")) +
geom_histogram()
str(portfolio)
View(portfolio)
ggplot(data = portfolio, aes(x = Date, y = "Capital Invested")) +
geom_histogram()
ggplot(data = portfolio, aes(x = Date, y = "Capital Invested")) +
geom_bar()
n <- 1000
time <- 1:n
y = sign(runif(n, min=-1, max=1))
cumsum(y)
plot(time, cumsum(y), type = "l")
library(haven)
hw1 <- read_sav("C:/Users/miqui/OneDrive/CSU Classes/PSY 611 Multivariate Statistics/Homework/Homework 1/2021 CH3_HW Dataset 1.sav")
View(hw1)
df <- read_sav("C:/Users/miqui/OneDrive/CSU Classes/PSY 611 Multivariate Statistics/Homework/Homework 1/2021 CH3_HW Dataset 1.sav")
rm(hw1)
sapply(df, function(x) ({sum(is.na(x))}/nrow(df))*100)
sum(is.na(df$Q15))
30/600
rowSums(is.na(df))
sapply(df, function(x) ({sum(is.na(x))}/nrow(df))*100)
library(dplyr)
q7 <- df %>% select(Q14, Q15, Q16)
rowsums(is.na(q7))
rowSums(is.na(q7))
# Select just the variables we want for question 7.
q7 <- df %>% select(ID, Q14, Q15, Q16)
rowSums(is.na(q7))
View(q7)
colSums(is.na(q7))
library(haven)
library(haven)
library(rio)
install.packages("rio")
library(rio)
setwd("C:/Users/miqui/OneDrive/R Projects/MinitabReadWrite Project")
ls()
setwd("C:/Users/miqui/OneDrive/R Projects/MinitabReadWrite Project")
library(rio)
import("AutoSpecs.MTW")
import("AutoSpecs.MTW", format = ".mtw")
import("AutoSpecs.MTW", format = "minitab")
install_formats()
import("AutoSpecs.MTW")
library(foreign)
read.mtp("AutoSpecs.MTW")
import("AutoSpecs.mwx") # Doesn't work
read.mtp("AutoSpecs.mwx")
